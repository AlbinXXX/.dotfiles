{"version":3,"file":"router.esm.js","sources":["../src/router/RouterContext.ts","../src/router/useRouter.ts","../src/router/useLink.ts","../src/router/useIntentLink.ts","../src/router/IntentLink.tsx","../src/router/Link.tsx","../src/router/utils/hasOwn.ts","../src/router/utils/isEmpty.ts","../src/router/RouteScope.tsx","../src/router/RouterProvider.tsx","../src/router/useStateLink.ts","../src/router/StateLink.tsx","../src/router/_parseRoute.ts","../src/router/utils/debug.ts","../src/router/utils/arrayify.ts","../src/router/utils/parseScopedParams.ts","../src/router/_resolveStateFromPath.ts","../src/router/_findMatchingRoutes.ts","../src/router/_resolvePathFromState.ts","../src/router/utils/jsonParamsEncoding.ts","../src/router/utils/paramsEncoding.ts","../src/router/route.ts","../src/router/useRouterState.ts","../src/router/withRouter.tsx"],"sourcesContent":["import React from 'react'\nimport {RouterContextValue} from './types'\n\n/**\n * @internal\n */\nexport const RouterContext = React.createContext<RouterContextValue | null>(null)\n","import {useContext} from 'react'\nimport {RouterContext} from './RouterContext'\nimport {RouterContextValue} from './types'\n\n/**\n * Returns the router context value.\n * @public\n *\n * @returns The router context value.\n *  {@link RouterContextValue}\n * @throws An error if the router context value is missing.\n *\n * @example\n * ```tsx\n * const router = useRouter()\n * ```\n */\nexport function useRouter(): RouterContextValue {\n  const router = useContext(RouterContext)\n\n  if (!router) {\n    throw new Error('Router: missing context value')\n  }\n\n  return router\n}\n","import {useCallback} from 'react'\nimport {useRouter} from './useRouter'\n\nfunction isLeftClickEvent(event: React.MouseEvent) {\n  return event.button === 0\n}\n\nfunction isModifiedEvent(event: React.MouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey)\n}\n\n/**\n * @public\n */\nexport interface UseLinkOptions {\n  /**\n   * The URL that the link should navigate to.\n   */\n  href?: string\n\n  /**\n   * The event handler function that should be called when the link is clicked.\n   */\n  onClick?: React.MouseEventHandler<HTMLElement>\n\n  /**\n   * Whether the link should replace the current URL in the browser history.\n   */\n  replace?: boolean\n\n  /**\n   * The target window or frame that the linked document will open in.\n   */\n  target?: string\n}\n\n/**\n * Returns an object with an `onClick` function that can be used as a click handler for a link.\n *\n * @public\n *\n * @param options - An object containing the properties for the link.\n *  See {@link UseLinkOptions}\n *\n * @returns An object with an `onClick` function.\n *\n * @example\n * ```tsx\n * const linkProps = useLink({\n *  href: 'https://www.sanity.io',\n *  target: '_blank'\n * })\n *\n * <a {...linkProps}>Link</a>\n * ```\n */\nexport function useLink(options: UseLinkOptions): {onClick: React.MouseEventHandler<HTMLElement>} {\n  const {onClick: onClickProp, href, target, replace = false} = options\n  const {navigateUrl} = useRouter()\n\n  const onClick = useCallback(\n    (event: React.MouseEvent<HTMLElement>): void => {\n      if (event.isDefaultPrevented()) {\n        return\n      }\n\n      if (!href) return\n\n      if (onClickProp) {\n        onClickProp(event)\n      }\n\n      if (isModifiedEvent(event) || !isLeftClickEvent(event)) {\n        return\n      }\n\n      // If target prop is set (e.g. to \"_blank\") let browser handle link.\n      if (target) {\n        return\n      }\n\n      event.preventDefault()\n\n      navigateUrl({path: href, replace})\n    },\n    [href, navigateUrl, onClickProp, replace, target],\n  )\n\n  return {onClick: onClick}\n}\n","import {useMemo} from 'react'\nimport {IntentParameters} from './types'\nimport {useLink} from './useLink'\nimport {useRouter} from './useRouter'\n\n/**\n * @public\n */\nexport interface UseIntentLinkOptions {\n  /**\n   * The name of the intent to trigger.\n   */\n  intent: string\n\n  /**\n   * An optional click event handler.\n   */\n  onClick?: React.MouseEventHandler<HTMLElement>\n\n  /**\n   * Optional parameters to pass to the intent. See {@link IntentParameters}\n   */\n  params?: IntentParameters\n\n  /**\n   * Whether to replace the current URL in the browser history.\n   */\n  replace?: boolean\n\n  /**\n   * The target window or frame to open the link in.\n   */\n  target?: string\n}\n\n/**\n *\n * Returns props for an anchor element that will trigger an intent when clicked.\n *\n * @example\n * ```tsx\n * const {onClick, href} = useIntentLink({\n *   intent: 'edit',\n *   params: {id: 'foo'}\n * })\n *\n * <a href={href} onClick={onClick}>Link to \"foo\" editor</a>\n * ```\n *\n * @public\n *\n * @param options - Options to use for the link\n *  {@link UseIntentLinkOptions}\n *\n * @returns - An object with `onClick` and `href` props to use for the link\n */\nexport function useIntentLink(options: UseIntentLinkOptions): {\n  onClick: React.MouseEventHandler<HTMLElement>\n  href: string\n} {\n  const {intent, onClick: onClickProp, params, replace, target} = options\n  const {resolveIntentLink} = useRouter()\n  const href = useMemo(() => resolveIntentLink(intent, params), [intent, params, resolveIntentLink])\n  const {onClick} = useLink({href, onClick: onClickProp, replace, target})\n\n  return {onClick, href}\n}\n","import React, {ForwardedRef, forwardRef} from 'react'\nimport {IntentParameters} from './types'\nimport {useIntentLink} from './useIntentLink'\n\n/**\n * Props for the {@link IntentLink} component.\n *\n * @public\n */\nexport interface IntentLinkProps {\n  /**\n   * The name of the intent.\n   */\n  intent: string\n\n  /**\n   * The parameters to include in the intent.\n   * {@link IntentParameters}\n   */\n  params?: IntentParameters\n\n  /**\n   * Whether to replace the current URL in the browser history instead of adding a new entry.\n   */\n  replace?: boolean\n}\n\n/**\n * @public\n *\n * @param props - Props to pass to `IntentLink` component.\n *  See {@link IntentLinkProps}\n *\n * @example\n * ```tsx\n * function MyComponent() {\n *  return <IntentLink intent=\"edit\" params={{id: 'abc123'}}>Edit</IntentLink>\n * }\n * ```\n */\nexport const IntentLink = forwardRef(function IntentLink(\n  props: IntentLinkProps & React.HTMLProps<HTMLAnchorElement>,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {intent, params, target, ...restProps} = props\n  const {onClick, href} = useIntentLink({\n    intent,\n    params,\n    target,\n    onClick: props.onClick,\n  })\n\n  return <a {...restProps} href={href} onClick={onClick} ref={ref} target={target} />\n})\n","import React, {forwardRef} from 'react'\nimport {useLink} from './useLink'\n\n/**\n * Props for the {@link Link} component.\n *\n * @public\n */\nexport interface LinkProps {\n  /**\n   * Whether to replace the current URL in the browser history instead of adding a new entry.\n   */\n  replace?: boolean\n}\n\n/**\n * A component that creates an HTML anchor element.\n *\n * @public\n *\n * @param props - Props to pass to the `Link` component.\n *  See {@link LinkProps}\n *\n * @example\n * ```tsx\n * function MyComponent() {\n *   return (\n *    <Link href=\"https://www.sanity.io\" target=\"_blank\" replace>\n *      Go to Sanity\n *    </Link>\n *   )\n * }\n * ```\n */\nexport const Link = forwardRef(function Link(\n  props: LinkProps & React.HTMLProps<HTMLAnchorElement>,\n  ref: React.ForwardedRef<HTMLAnchorElement>,\n) {\n  const {onClick: onClickProp, href, target, replace, ...restProps} = props\n  const {onClick} = useLink({onClick: onClickProp, href, target, replace})\n\n  return <a {...restProps} onClick={onClick} href={href} target={target} ref={ref} />\n})\n","const _hasOWn = Object.prototype.hasOwnProperty\n\nexport const hasOwn = _hasOWn.call.bind(_hasOWn)\n","import {hasOwn} from './hasOwn'\n\nexport function isEmpty(object: Record<string, unknown>): boolean {\n  for (const key in object) {\n    if (hasOwn(object, key)) {\n      return false\n    }\n  }\n\n  return true\n}\n","/* eslint-disable camelcase */\n\nimport React, {useCallback, useMemo} from 'react'\nimport {isEmpty} from './utils/isEmpty'\nimport {RouterContext} from './RouterContext'\nimport {NavigateOptions, RouterContextValue} from './types'\nimport {useRouter} from './useRouter'\n\nfunction addScope(\n  routerState: Record<string, any>,\n  scope: string,\n  scopedState: Record<string, any>,\n) {\n  return (\n    scopedState && {\n      ...routerState,\n      [scope]: scopedState,\n    }\n  )\n}\n\n/**\n * Props for the {@link RouteScope} component.\n *\n * @public\n */\nexport interface RouteScopeProps {\n  /**\n   * The scope for the nested routes.\n   */\n  scope: string\n  /**\n   * The content to display inside the route scope.\n   */\n  children: React.ReactNode\n}\n\n/**\n * A component that wraps a scoped router context, so that calls to\n * `useRouter()`, `useRouterState()`, and usage of `<StateLink />`\n * will be prefixed with the scope segment.\n *\n * @public\n *\n * @param props - Props to pass `RouteScope` component.\n *  See {@link RouteScopeProps}\n *\n * @example\n * ```tsx\n * function MyComponent() {\n *  return (\n *    <RouteScope scope=\"foo\">\n *      <StateLink state={{bar: 'baz'}}>Link</StateLink>\n *    </RouteScope>\n *  )\n * }\n * ```\n */\nexport function RouteScope(props: RouteScopeProps): React.ReactElement {\n  const {children, scope} = props\n  const parent = useRouter()\n  const {resolvePathFromState: parent_resolvePathFromState, navigate: parent_navigate} = parent\n\n  const resolvePathFromState = useCallback(\n    (nextState: Record<string, any>): string => {\n      const nextStateScoped: Record<string, any> = isEmpty(nextState)\n        ? {}\n        : addScope(parent.state, scope, nextState)\n\n      return parent_resolvePathFromState(nextStateScoped)\n    },\n    [parent_resolvePathFromState, parent.state, scope],\n  )\n\n  const navigate = useCallback(\n    (nextState: Record<string, any>, options?: NavigateOptions): void => {\n      const nextScopedState = addScope(parent.state, scope, nextState)\n      parent_navigate(nextScopedState, options)\n    },\n    [parent_navigate, parent.state, scope],\n  )\n\n  const scopedRouter: RouterContextValue = useMemo(\n    () => ({\n      ...parent,\n      navigate,\n      resolvePathFromState,\n      state: parent.state[scope] as any,\n    }),\n    [navigate, parent, resolvePathFromState, scope],\n  )\n\n  return <RouterContext.Provider value={scopedRouter}>{children}</RouterContext.Provider>\n}\n","import React, {useCallback, useMemo} from 'react'\nimport {RouterContext} from './RouterContext'\nimport {IntentParameters, RouterContextValue, NavigateOptions, Router, RouterState} from './types'\n\n/**\n * The props for the {@link RouterProvider} component.\n *\n * @public\n */\nexport interface RouterProviderProps {\n  /**\n   * A function that is called when the user navigates to a new path.\n   * Takes an object containing the path to navigate to and an optional `replace` flag.\n   */\n  onNavigate: (opts: {path: string; replace?: boolean}) => void\n  /**\n   * The router object that is used to handle navigation. See {@link Router}\n   */\n  router: Router\n  /**\n   * The current state of the router. See {@link RouterState}\n   */\n  state: RouterState\n  /**\n   * The child elements to render.\n   */\n  children: React.ReactNode\n}\n\n/**\n * @example\n * ```tsx\n * import {\n *   NavigateOptions,\n *   route,\n *   RouterProvider,\n *   RouterState\n * } from 'sanity'\n * import {useCallback, useMemo} from 'react'\n *\n * function Root() {\n *   const router = useMemo(() => route.create('/'), [])\n *\n *   const [state, setState] = useState<RouterState>({})\n *\n *   const handleNavigate = useCallback((\n *     path: string,\n *     options?: NavigateOptions\n *   ) => {\n *     console.log('navigate', path, options)\n *\n *     setState(router.decode(path))\n *   }, [router])\n *\n *   return (\n *     <RouterProvider\n *       onNavigate={handleNavigate}\n *       router={router}\n *       state={state}\n *     >\n *       <div>This is a routed application</div>\n *     </RouterProvider>\n *   )\n * }\n * ```\n *\n * @param props - The component props.\n *  {@link RouterProviderProps}\n *\n * @public\n */\nexport function RouterProvider(props: RouterProviderProps): React.ReactElement {\n  const {onNavigate, router: routerProp, state} = props\n\n  const resolveIntentLink = useCallback(\n    (intentName: string, parameters?: IntentParameters): string => {\n      const [params, payload] = Array.isArray(parameters) ? parameters : [parameters]\n      return routerProp.encode({intent: intentName, params, payload})\n    },\n    [routerProp],\n  )\n\n  const resolvePathFromState = useCallback(\n    (nextState: Record<string, unknown>): string => {\n      return routerProp.encode(nextState)\n    },\n    [routerProp],\n  )\n\n  const navigate = useCallback(\n    (nextState: Record<string, unknown>, options: NavigateOptions = {}) => {\n      onNavigate({path: resolvePathFromState(nextState), replace: options.replace})\n    },\n    [onNavigate, resolvePathFromState],\n  )\n\n  const navigateIntent = useCallback(\n    (intentName: string, params?: IntentParameters, options: NavigateOptions = {}) => {\n      onNavigate({path: resolveIntentLink(intentName, params), replace: options.replace})\n    },\n    [onNavigate, resolveIntentLink],\n  )\n\n  const router: RouterContextValue = useMemo(\n    () => ({\n      navigate,\n      navigateIntent,\n      navigateUrl: onNavigate,\n      resolveIntentLink,\n      resolvePathFromState,\n      state,\n    }),\n    [navigate, navigateIntent, onNavigate, resolveIntentLink, resolvePathFromState, state],\n  )\n\n  return <RouterContext.Provider value={router}>{props.children}</RouterContext.Provider>\n}\n","import React, {useMemo} from 'react'\nimport {useRouter} from './useRouter'\nimport {useLink} from './useLink'\n\nconst EMPTY_STATE = {}\n\n/**\n * @public\n */\nexport interface UseStateLinkOptions {\n  /**\n   * The click event handler for the link.\n   */\n  onClick?: React.MouseEventHandler<HTMLElement>\n  /**\n   * Whether to replace the current history entry instead of adding a new one.\n   */\n  replace?: boolean\n  /**\n   * The state object to update when the link is clicked.\n   */\n  state?: Record<string, unknown>\n  /**\n   * The target window or frame to open the linked document in.\n   */\n  target?: string\n  /**\n   * Whether to navigate to the index page of the linked document.\n   */\n  toIndex?: boolean\n}\n\n/**\n * @public\n *\n * @param options - Options to use for the link\n *  {@link UseStateLinkOptions}\n *\n * @returns - An object with `onClick` and `href` props to use for the link\n *\n * @example\n * ```tsx\n * const {onClick, href} = useStateLink({state: {foo: 'bar'}})\n * ```\n */\nexport function useStateLink(options: UseStateLinkOptions): {\n  onClick: React.MouseEventHandler<HTMLElement>\n  href: string\n} {\n  const {onClick: onClickProp, replace, state, target, toIndex = false} = options\n\n  if (state && toIndex) {\n    throw new Error('Passing both `state` and `toIndex={true}` as props to StateLink is invalid')\n  }\n\n  if (!state && !toIndex) {\n    // eslint-disable-next-line no-console\n    console.error(\n      new Error(\n        'No state passed to StateLink. If you want to link to an empty state, its better to use the the `toIndex` property',\n      ),\n    )\n  }\n\n  const {resolvePathFromState} = useRouter()\n\n  const href = useMemo(\n    () => resolvePathFromState(toIndex ? EMPTY_STATE : state || EMPTY_STATE),\n    [resolvePathFromState, state, toIndex],\n  )\n\n  const {onClick} = useLink({href, onClick: onClickProp, replace, target})\n\n  return {onClick, href}\n}\n","import React, {forwardRef} from 'react'\nimport {useStateLink} from './useStateLink'\n\n/**\n * Props for the {@link StateLink} component.\n *\n * @public\n */\nexport interface StateLinkProps {\n  /**\n   * Whether to replace the current history entry instead of adding a new one.\n   */\n  replace?: boolean\n  /**\n   * The state to associate with the link.\n   */\n  state?: Record<string, unknown>\n  /**\n   * Whether to navigate to the index page of the app.\n   */\n  toIndex?: boolean\n}\n\n/**\n * A component that creates a link that updates the URL state.\n *\n * @remarks\n * This component uses the {@link useStateLink} hook\n * to create a link that updates the URL state.\n *\n * @param props - Props to pass to the `StateLink` component.\n *  See {@link StateLinkProps}.\n *\n * @public\n *\n * @example\n * ```tsx\n * function MyComponent() {\n *  return <StateLink state={{foo: 'bar'}}>Link</StateLink>\n * }\n * ```\n */\nexport const StateLink = forwardRef(function StateLink(\n  props: StateLinkProps & Omit<React.HTMLProps<HTMLAnchorElement>, 'href'>,\n  ref: React.ForwardedRef<HTMLAnchorElement>,\n) {\n  const {onClick: onClickProp, replace, state, target, toIndex = false, ...restProps} = props\n  const {onClick, href} = useStateLink({\n    onClick: onClickProp,\n    replace,\n    state,\n    target,\n    toIndex,\n  })\n\n  return <a {...restProps} href={href} onClick={onClick} ref={ref} />\n})\n","import {Route, RouteSegment} from './types'\n\nconst VALID_PARAM_SEGMENT = /^[a-zA-Z0-9_-]+$/\n\nfunction createSegment(segment: string): RouteSegment | null {\n  if (!segment) {\n    return null\n  }\n\n  if (segment.startsWith(':')) {\n    const paramName = segment.substring(1)\n\n    if (!VALID_PARAM_SEGMENT.test(paramName)) {\n      const addendum = segment.includes('*')\n        ? ' Splats are not supported. Consider using child routes instead'\n        : ''\n      // eslint-disable-next-line no-console\n      console.error(\n        new Error(`Warning: Param segments \"${segment}\" includes invalid characters.${addendum}`),\n      )\n    }\n\n    return {type: 'param', name: paramName}\n  }\n\n  return {type: 'dir', name: segment}\n}\n\n/** @internal */\nexport function _parseRoute(route: string): Route {\n  const [pathname] = route.split('?')\n\n  const segments = pathname.split('/').map(createSegment).filter(Boolean) as RouteSegment[]\n\n  return {\n    raw: route,\n    segments: segments,\n  }\n}\n","import Debug from 'debug'\n\nexport const debug = Debug('state-router')\n","export function arrayify<T>(val: Array<T> | T): Array<T> {\n  if (Array.isArray(val)) {\n    return val\n  }\n\n  return val ? [val] : []\n}\n","import {InternalSearchParam} from '../types'\n\nexport function parseScopedParams(params: [key: string, value: string][]): InternalSearchParam[] {\n  return params.map(([key, value]) => [parse(key), value])\n}\n\nconst OPEN = 1\nconst CLOSED = 0\n\nfunction parse(str: string) {\n  const result = []\n  let i = 0\n  let state = CLOSED\n  while (i < str.length) {\n    const nextBracketIdx = str.indexOf('[', i)\n    if (nextBracketIdx === -1) {\n      result.push(str.slice(i, str.length))\n      break\n    }\n    if (state === OPEN) {\n      throw new Error('Nested brackets not supported')\n    }\n    state = OPEN\n    if (nextBracketIdx > i) {\n      result.push(str.slice(i, nextBracketIdx))\n      i = nextBracketIdx\n    }\n\n    const nextClosing = str.indexOf(']', nextBracketIdx)\n    if (nextClosing === -1) {\n      if (state === OPEN) {\n        throw new Error('Unclosed bracket')\n      }\n      break\n    }\n    state = CLOSED\n    result.push(str.slice(i + 1, nextClosing))\n    i = nextClosing + 1\n  }\n  return result\n}\n","import {partition} from 'lodash'\nimport {InternalSearchParam, RouterNode, RouterState, SearchParam} from './types'\nimport {debug} from './utils/debug'\nimport {arrayify} from './utils/arrayify'\nimport {parseScopedParams} from './utils/parseScopedParams'\n\nfunction matchPath(\n  node: RouterNode,\n  path: string,\n  searchParams: InternalSearchParam[],\n): RouterState | null {\n  const parts = path.split('/').filter(Boolean)\n  const segmentsLength = node.route.segments.length\n\n  if (parts.length < segmentsLength) {\n    return null\n  }\n\n  const state: RouterState = {}\n  const isMatching = node.route.segments.every((segment, i) => {\n    if (segment.type === 'dir') {\n      return segment.name === parts[i]\n    }\n\n    const transform = node.transform && node.transform[segment.name]\n\n    state[segment.name] = transform ? transform.toState(parts[i]) : parts[i]\n\n    return true\n  })\n\n  if (!isMatching) {\n    return null\n  }\n\n  const rest = parts.slice(segmentsLength)\n\n  let childState: RouterState | null = null\n\n  const children =\n    typeof node.children === 'function' ? arrayify(node.children(state)) : node.children\n\n  const unscopedParams = removeScope(node.scope, searchParams)\n\n  children.some((childNode) => {\n    if (childNode) {\n      const childParams = childNode.scope\n        ? unscopedParams.filter(([namespaces]) => childNode.scope === namespaces[0])\n        : unscopedParams\n\n      childState = matchPath(childNode, rest.join('/'), childParams)\n      return childState\n    }\n    return undefined\n  })\n\n  if (rest.length > 0 && !childState) {\n    return null\n  }\n\n  const selfParams = unscopedParams.flatMap(([namespace, value]): SearchParam[] => {\n    return namespace.length === 1 ? [[namespace[0], value]] : []\n  })\n\n  const mergedState: RouterState = {\n    ...state,\n    ...(childState || {}),\n    ...(selfParams.length > 0 ? {_searchParams: selfParams} : {}),\n  }\n\n  return node.scope ? {[node.scope]: mergedState} : mergedState\n}\n\n/**\n * @internal\n */\nexport function _resolveStateFromPath(node: RouterNode, path: string): Record<string, any> | null {\n  debug('resolving state from path %s', path)\n\n  const [pathname, search] = path.split('?')\n  const urlSearchParams = Array.from(new URLSearchParams(search).entries())\n\n  const pathMatch = matchPath(node, pathname, parseScopedParams(urlSearchParams))\n\n  debug('resolved: %o', pathMatch || null)\n\n  return pathMatch || null\n}\n\nfunction removeScope(\n  scope: string | undefined,\n  searchParams: InternalSearchParam[],\n): InternalSearchParam[] {\n  return scope\n    ? searchParams.map(([namespaces, value]) => [\n        namespaces[0] === scope ? namespaces.slice(1) : namespaces,\n        value,\n      ])\n    : searchParams\n}\n","import {difference, intersection, isPlainObject, pick} from 'lodash'\nimport {\n  InternalSearchParam,\n  MatchError,\n  MatchOk,\n  MatchResult,\n  RouterNode,\n  RouterState,\n} from './types'\nimport {arrayify} from './utils/arrayify'\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return isPlainObject(value)\n}\n\nfunction createMatchError(\n  node: RouterNode,\n  missingKeys: string[],\n  unmappableStateKeys: string[],\n): MatchError {\n  return {type: 'error', node, missingKeys, unmappableStateKeys}\n}\n\nfunction createMatchOk(\n  node: RouterNode,\n  matchedState: Record<string, string>,\n  searchParams: InternalSearchParam[],\n  child?: MatchOk | undefined,\n): MatchOk {\n  return {type: 'ok', node, matchedState, searchParams, child}\n}\n\n/** @internal */\nexport function _findMatchingRoutes(node: RouterNode, _state?: RouterState): MatchResult {\n  if (!_state) {\n    return createMatchOk(node, {}, [])\n  }\n\n  const scopedState = node.scope ? (_state[node.scope] as RouterState) : _state\n\n  const {_searchParams: searchParams = [], ...state} = scopedState || {}\n\n  const requiredParams = node.route.segments\n    .filter((seg) => seg.type === 'param')\n    .map((seg) => seg.name)\n\n  const stateKeys = isRecord(state) ? Object.keys(state) : []\n\n  // These are params found in both the state and the route definition\n  const consumedParams = intersection(stateKeys, requiredParams)\n\n  // these are params found in the route definition but not in the state, can't map them to a route\n  const missingParams = difference(requiredParams, consumedParams)\n\n  // these are params found in the state but not in the route definition\n  const remainingParams = difference(stateKeys, consumedParams)\n\n  if (missingParams.length > 0) {\n    return createMatchError(node, missingParams, [])\n  }\n\n  const scopedParams = searchParams.map(([key, value]): InternalSearchParam => [[key], value])\n\n  const consumedState = pick(state, consumedParams) as Record<string, string>\n\n  if (remainingParams.length === 0) {\n    return createMatchOk(node, consumedState, scopedParams)\n  }\n\n  const children = arrayify(\n    (typeof node.children === 'function'\n      ? node.children(isRecord(state) ? state : {})\n      : node.children) || [],\n  )\n\n  if (remainingParams.length > 0 && children.length === 0) {\n    // our state includes extra keys that's not consumed by child routes\n    return createMatchError(node, [], remainingParams)\n  }\n\n  const remainingState = pick(state, remainingParams)\n\n  const childResult = children.map((childNode) => _findMatchingRoutes(childNode, remainingState))\n\n  // Look for a matching route\n  const found = childResult.find((res): res is MatchOk => res.type === 'ok')\n  return found\n    ? createMatchOk(node, consumedState, scopedParams, found)\n    : createMatchError(node, [], remainingParams)\n}\n","import {_findMatchingRoutes} from './_findMatchingRoutes'\nimport {InternalSearchParam, MatchOk, RouterNode, RouterState, SearchParam} from './types'\nimport {debug} from './utils/debug'\n\n/** @internal */\nexport function _resolvePathFromState(node: RouterNode, _state: RouterState): string {\n  debug('Resolving path from state %o', _state)\n\n  const match = _findMatchingRoutes(node, _state)\n  if (match.type === 'error') {\n    const unmappable = match.unmappableStateKeys\n    if (unmappable.length > 0) {\n      throw new Error(\n        `Unable to find matching route for state. Could not map the following state key${\n          unmappable.length == 1 ? '' : 's'\n        } to a valid url: ${unmappable.map(quote).join(', ')}`,\n      )\n    }\n    const missingKeys = match.missingKeys\n    throw new Error(\n      `Unable to find matching route for state. State object is missing the following key${\n        missingKeys.length == 1 ? '' : 's'\n      } defined in route: ${missingKeys.map(quote).join(', ')}`,\n    )\n  }\n\n  const {path, searchParams} = pathFromMatchResult(match)\n\n  const search =\n    searchParams.length > 0 ? new URLSearchParams(encodeParams(searchParams)).toString() : ''\n\n  return `/${path.join('/')}${search ? `?${search}` : ''}`\n}\n\nfunction bracketify(value: string): string {\n  return `[${value}]`\n}\n\nfunction encodeParamPath(paramPath: string[]): string {\n  const [head, ...tail] = paramPath\n\n  return tail.length > 0 ? [head, ...tail.map(bracketify)].join('') : head\n}\nfunction encodeParams(params: InternalSearchParam[]): SearchParam[] {\n  return params.map(([key, value]): SearchParam => [encodeParamPath(key), value])\n}\n\nfunction pathFromMatchResult(match: MatchOk): {\n  path: string[]\n  searchParams: InternalSearchParam[]\n} {\n  const matchedState = match.matchedState\n\n  const base = match.node.route.segments.map((segment) => {\n    if (segment.type === 'dir') {\n      return segment.name\n    }\n\n    const transform = match.node.transform && match.node.transform[segment.name]\n\n    return transform\n      ? transform.toPath(matchedState[segment.name] as any)\n      : matchedState[segment.name]\n  })\n\n  const childMatch = match.child ? pathFromMatchResult(match.child) : undefined\n\n  const searchParams = childMatch?.searchParams\n    ? [...match.searchParams, ...childMatch.searchParams]\n    : match.searchParams\n\n  return {\n    searchParams: addNodeScope(match.node, searchParams),\n    path: [...(base || []), ...(childMatch?.path || [])],\n  }\n}\n\nfunction addNodeScope(\n  node: RouterNode,\n  searchParams: InternalSearchParam[],\n): InternalSearchParam[] {\n  const scope = node.scope\n  return scope\n    ? searchParams.map(([namespaces, value]) => [[scope, ...namespaces], value])\n    : searchParams\n}\n\nfunction quote(value: string): string {\n  return `\"${value}\"`\n}\n","export function decodeJsonParams(pathsegment = ''): Record<string, unknown> {\n  const segment = decodeURIComponent(pathsegment)\n\n  if (!segment) {\n    return {}\n  }\n\n  try {\n    return JSON.parse(atob(segment))\n  } catch (err) {\n    // Maybe try the old format (non-base64 encoded)\n  }\n\n  try {\n    return JSON.parse(segment)\n  } catch (err) {\n    console.warn('Failed to parse JSON parameters')\n  }\n\n  return {}\n}\n\nexport function encodeJsonParams(params?: Record<string, unknown>): string {\n  return params ? btoa(JSON.stringify(params)) : ''\n}\n","export function decodeParams(pathSegment: string): Record<string, string> {\n  return pathSegment.split(';').reduce<Record<string, string>>((params, pair) => {\n    const [key, value] = pair.split('=')\n\n    params[decodeURIComponent(key)] = decodeURIComponent(value)\n\n    return params\n  }, {})\n}\n\nexport function encodeParams(params: Record<string, string | undefined | null>): string {\n  return Object.entries(params)\n    .filter(([, value]) => value !== undefined && value !== null)\n    .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value as string)}`)\n    .join(';')\n}\n","import {_parseRoute} from './_parseRoute'\nimport {_resolveStateFromPath} from './_resolveStateFromPath'\nimport {_resolvePathFromState} from './_resolvePathFromState'\nimport {RouteTransform, Router, RouteChildren} from './types'\nimport {decodeJsonParams, encodeJsonParams} from './utils/jsonParamsEncoding'\nimport {decodeParams, encodeParams} from './utils/paramsEncoding'\n\n/**\n * @public\n */\nexport interface RouteNodeOptions {\n  /**\n   * The path of the route node.\n   */\n  path?: string\n  /**\n   * The children of the route node. See {@link RouteChildren}\n   */\n  children?: RouteChildren\n  /**\n   * The transforms to apply to the route node. See {@link RouteTransform}\n   */\n  transform?: {\n    [key: string]: RouteTransform<any>\n  }\n  /**\n   * The scope of the route node.\n   */\n  scope?: string\n}\n\n/**\n * Interface for the {@link route} object.\n *\n * @public\n */\nexport interface RouteObject {\n  /**\n   * Creates a new router.\n   * Returns {@link Router}\n   * See {@link RouteNodeOptions} and {@link RouteChildren}\n   */\n  create: (\n    routeOrOpts: RouteNodeOptions | string,\n    childrenOrOpts?: RouteNodeOptions | RouteChildren | null,\n    children?: Router | RouteChildren,\n  ) => Router\n\n  /**\n   * Creates a new router for handling intents.\n   * Returns {@link Router}\n   */\n  intents: (base: string) => Router\n\n  /**\n   * Creates a new router scope.\n   * Returns {@link Router}\n   */\n  scope: (scopeName: string, ...rest: any[]) => Router\n}\n\n/**\n * An object containing functions for creating routers and router scopes.\n * See {@link RouteObject}\n *\n * @public\n *\n * @example\n * ```ts\n * const router = route.create({\n *   path: \"/foo\",\n *   children: [\n *     route.create({\n *       path: \"/bar\",\n *       children: [\n *         route.create({\n *           path: \"/:baz\",\n *           transform: {\n *             baz: {\n *               toState: (id) => ({ id }),\n *               toPath: (state) => state.id,\n *             },\n *           },\n *         }),\n *       ],\n *     }),\n *   ],\n * });\n * ```\n */\nexport const route: RouteObject = {\n  create: (routeOrOpts, childrenOrOpts, children) =>\n    _createNode(normalizeArgs(routeOrOpts, childrenOrOpts, children)),\n  intents: (base: string) => {\n    const basePath = normalize(base).join('/')\n\n    return route.create(`${basePath}/:intent`, [\n      route.create(\n        ':params',\n        {\n          transform: {\n            params: {\n              toState: decodeParams,\n              toPath: encodeParams,\n            },\n          },\n        },\n        [\n          route.create(':payload', {\n            transform: {\n              payload: {\n                toState: decodeJsonParams,\n                toPath: encodeJsonParams,\n              },\n            },\n          }),\n        ],\n      ),\n    ])\n  },\n  scope: (scopeName, ...rest) => {\n    const options = normalizeArgs(...rest)\n\n    return _createNode({\n      ...options,\n      scope: scopeName,\n    })\n  },\n}\n\nfunction normalizeChildren(children: any): RouteChildren {\n  if (Array.isArray(children) || typeof children === 'function') {\n    return children\n  }\n  return children ? [children] : []\n}\n\nfunction isRoute(val?: RouteNodeOptions | Router | RouteChildren) {\n  return val && '_isRoute' in val\n}\n\nfunction normalizeArgs(...args: any[]): RouteNodeOptions\nfunction normalizeArgs(\n  path: string | RouteNodeOptions,\n  childrenOrOpts?: RouteNodeOptions | Router | RouteChildren,\n  children?: Router | RouteChildren,\n): RouteNodeOptions {\n  if (typeof path === 'object') {\n    return path\n  }\n\n  if (\n    Array.isArray(childrenOrOpts) ||\n    typeof childrenOrOpts === 'function' ||\n    isRoute(childrenOrOpts)\n  ) {\n    return {path, children: normalizeChildren(childrenOrOpts)}\n  }\n\n  if (children) {\n    return {path, ...childrenOrOpts, children: normalizeChildren(children)}\n  }\n\n  return {path, ...childrenOrOpts}\n}\n\nfunction normalize(...paths: string[]) {\n  return paths.reduce<string[]>((acc, path) => acc.concat(path.split('/')), []).filter(Boolean)\n}\n\nconst EMPTY_STATE = {}\n\nfunction isRoot(pathname: string): boolean {\n  // it is the root if every segment is an empty string\n  return pathname.split('/').every((segment) => !segment)\n}\n\n/**\n * @internal\n * @param options - Route node options\n */\nexport function _createNode(options: RouteNodeOptions): Router {\n  const {path, scope, transform, children} = options\n\n  if (!path) {\n    throw new TypeError('Missing path')\n  }\n\n  const parsedRoute = _parseRoute(path)\n\n  return {\n    _isRoute: true, // todo: make a Router class instead\n    scope,\n    route: parsedRoute,\n    children: children || [],\n    transform,\n    encode(state) {\n      return _resolvePathFromState(this, state)\n    },\n    decode(_path) {\n      return _resolveStateFromPath(this, _path)\n    },\n    isRoot: isRoot,\n    isNotFound(pathname: string): boolean {\n      return this.decode(pathname) === null\n    },\n    getBasePath(): string {\n      return this.encode(EMPTY_STATE)\n    },\n    getRedirectBase(pathname: string): string | null {\n      if (isRoot(pathname)) {\n        const basePath = this.getBasePath()\n        // Check if basepath is something different than given\n        if (pathname !== basePath) {\n          return basePath\n        }\n      }\n      return null\n    },\n  }\n}\n","import {identity} from 'lodash'\nimport {useMemo} from 'react'\nimport {RouterState} from './types'\nimport {useRouter} from './useRouter'\n\n/**\n * @public\n *\n * @param selector - A selector function that receives the router state and returns a value. See {@link RouterState}\n *\n * @returns The value returned by the selector function or RouterState. See {@link RouterState}\n *\n * @example\n * ```tsx\n * const {activeTool} = useRouterState(state => state.tool)\n * ```\n */\nexport function useRouterState<R = RouterState>(selector: (routerState: RouterState) => R): R\n\n/**\n * @public\n *\n * @returns The router state. See {@link RouterState}\n *\n * @example\n * ```tsx\n * const routerState = useRouterState()\n * ```\n */\nexport function useRouterState(): RouterState\n\n/**\n * @public\n */\nexport function useRouterState(\n  selector: (routerState: RouterState) => unknown = identity,\n): unknown {\n  const {state} = useRouter()\n  return useMemo(() => selector(state), [selector, state])\n}\n","import React, {ComponentType, FunctionComponent} from 'react'\nimport {RouterContextValue} from './types'\nimport {useRouter} from './useRouter'\n\n/**\n * A higher-order component that injects the `router` object from the `useRouter` hook\n * into the props of the wrapped component.\n *\n * @internal\n * @deprecated - Use the `useRouter` hook instead.\n *\n * @param Component - The component to wrap.\n *\n * @returns The wrapped component.\n *\n * @example\n * ```tsx\n * function MyComponent(props) {\n *  return <div>{props.router.state.myParam}</div>\n * }\n *\n * export default withRouter(MyComponent)\n * ```\n */\nexport function withRouter<Props extends {router: RouterContextValue}>(\n  Component: ComponentType<Props>,\n): FunctionComponent<Omit<Props, 'router'>> {\n  function WithRouter(props: Omit<Props, 'router'>) {\n    const router = useRouter()\n\n    return <Component {...(props as Props)} router={router} />\n  }\n\n  WithRouter.displayName = `withRouter(${Component.displayName || Component.name})`\n\n  return WithRouter\n}\n\n/**\n * @internal\n * @deprecated - Use the `useRouter` hook instead.\n */\nexport interface WithRouterProps {\n  /**\n   * The `router` object from the `useRouter` hook.\n   *  {@link RouterContextValue}\n   */\n  router: RouterContextValue\n  /**\n   * A function that renders the wrapped component with the `router` object as a parameter.\n   */\n  children: (router: RouterContextValue) => React.ReactElement\n}\n\n/**\n * A higher-order component that injects the router object into its child component.\n *\n * @internal\n * @deprecated - Use the `useRouter` hook instead.\n *\n * @returns The rendered component.\n *\n * @example\n * ```tsx\n * function MyComponent(props: {router: Router}) {\n *   const {location} = props.router\n *   const {pathname} = location\n *   return <p>The current path is: {pathname}</p>\n * }\n *\n * function App() {\n *   return (\n *     <Router>\n *       <WithRouter>\n *         {router => <MyComponent router={router} />}\n *       </WithRouter>\n *     </Router>\n *   )\n * }\n * ```\n */\nexport const WithRouter = withRouter((props: WithRouterProps) => props.children(props.router))\n"],"names":["RouterContext","React","createContext","useRouter","router","useContext","Error","isLeftClickEvent","event","button","isModifiedEvent","metaKey","altKey","ctrlKey","shiftKey","useLink","options","onClick","onClickProp","href","target","replace","navigateUrl","useCallback","isDefaultPrevented","preventDefault","path","useIntentLink","intent","params","resolveIntentLink","useMemo","IntentLink","forwardRef","props","ref","restProps","Link","_hasOWn","Object","prototype","hasOwnProperty","hasOwn","call","bind","isEmpty","object","key","addScope","routerState","scope","scopedState","RouteScope","children","parent","resolvePathFromState","parent_resolvePathFromState","navigate","parent_navigate","nextState","nextStateScoped","state","nextScopedState","scopedRouter","Provider","value","RouterProvider","onNavigate","routerProp","intentName","parameters","payload","Array","isArray","encode","arguments","length","undefined","navigateIntent","EMPTY_STATE","useStateLink","toIndex","console","error","StateLink","VALID_PARAM_SEGMENT","createSegment","segment","startsWith","paramName","substring","test","addendum","includes","concat","type","name","_parseRoute","route","pathname","split","segments","map","filter","Boolean","raw","debug","Debug","arrayify","val","parseScopedParams","_ref","parse","OPEN","CLOSED","str","result","i","nextBracketIdx","indexOf","push","slice","nextClosing","matchPath","node","searchParams","parts","segmentsLength","isMatching","every","transform","toState","rest","childState","unscopedParams","removeScope","some","childNode","childParams","_ref2","namespaces","join","selfParams","flatMap","_ref3","namespace","mergedState","_searchParams","_resolveStateFromPath","search","urlSearchParams","from","URLSearchParams","entries","pathMatch","_ref4","isRecord","isPlainObject","createMatchError","missingKeys","unmappableStateKeys","createMatchOk","matchedState","child","_findMatchingRoutes","_state","requiredParams","seg","stateKeys","keys","consumedParams","intersection","missingParams","difference","remainingParams","scopedParams","_ref5","consumedState","pick","remainingState","childResult","found","find","res","_resolvePathFromState","match","unmappable","quote","pathFromMatchResult","encodeParams","toString","bracketify","encodeParamPath","paramPath","head","tail","_ref6","base","toPath","childMatch","addNodeScope","_ref7","decodeJsonParams","pathsegment","decodeURIComponent","JSON","atob","err","warn","encodeJsonParams","btoa","stringify","decodeParams","pathSegment","reduce","pair","_ref8","_ref9","encodeURIComponent","create","routeOrOpts","childrenOrOpts","_createNode","normalizeArgs","intents","basePath","normalize","scopeName","_len","_key","normalizeChildren","isRoute","_len2","paths","_key2","acc","isRoot","TypeError","parsedRoute","_isRoute","decode","_path","isNotFound","getBasePath","getRedirectBase","useRouterState","selector","identity","withRouter","Component","WithRouter","jsx","displayName"],"mappings":"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"}